package pp.droids.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import static pp.util.FloatMath.DEG_TO_RAD;

/**
 * Represents configurations of the game model. Configurations can be loaded from
 * a json file.
 */
@SuppressWarnings("CanBeFinal")
public class DroidsConfig {
    /**
     * The number of levels generated by the random map generator..
     */
    @JsonProperty("number of levels") //NON-NLS
    private int numLevels = 1;

    /**
     * The width of the map.
     */
    @JsonProperty("map width") //NON-NLS
    private int width = 30;

    /**
     * The height of the map.
     */
    @JsonProperty("map height") //NON-NLS
    private int height = 25;

    /**
     * The number of enemies in each level of a random map.
     */
    @JsonProperty("number of enemies") //NON-NLS
    private int numEnemies = 2;

    /**
     * The number of obstacles in each level of a random map.
     */
    @JsonProperty("number of obstacles") //NON-NLS
    private int numObstacles = 5;

    /**
     * The number of rockets in each level of a random map.
     */
    @JsonProperty("number of rockets") //NON-NLS
    private int numRockets = 2;

    /**
     * The number of flags in a random map.
     */
    @JsonProperty("number of flags") //NON-NLS
    private int numFlags = 1;

    /**
     * Defines if a random map contains a maze.
     */
    @JsonProperty("has maze") //NON-NLS
    private boolean withMaze = true;

    /**
     * The field of view on the map in degrees. A value greater than 360
     * (degrees) means an unrestricted viewing area.
     */
    @JsonProperty("viewing area") //NON-NLS
    private float viewingArea = 120;

    @JsonProperty("lives")
    private int lives = 10;

    @JsonIgnore
    public int getLives(){ return lives; }

    /**
     * Returns the number of levels the random map generator shall generate.
     */
    @JsonIgnore
    public int getNumLevels() {
        return numLevels;
    }

    /**
     * Returns the width of the map.
     */
    @JsonIgnore
    public int getWidth() {
        return width;
    }

    /**
     * Returns the height of the map.
     */
    @JsonIgnore
    public int getHeight() {
        return height;
    }

    /**
     * Returns the number of enemies created in each level of a random map.
     */
    @JsonIgnore
    public int getNumEnemies() {
        return numEnemies;
    }

    /**
     * Returns the number of obstacles created in each level of a random map.
     */
    @JsonIgnore
    public int getNumObstacles() {
        return numObstacles;
    }

    /**
     * Returns the number of rockets created in each level of a random map.
     */
    @JsonIgnore
    public int getNumRockets() {
        return numRockets;
    }

    /**
     * Returns the number of flags created in a random map.
     */
    @JsonIgnore
    public int getNumFlags() {
        return numFlags;
    }

    /**
     * Returns true, if the map contains a maze.
     */
    @JsonIgnore
    public boolean hasMaze() {
        return withMaze;
    }

    /**
     * Returns the field of vision on this map.
     */
    @JsonIgnore
    public float getViewingArea() {
        return viewingArea * DEG_TO_RAD;
    }

    /**
     * Anzahl der Leben des Droids
     */
    @JsonProperty("number of droid lives") //NON-NLS
    private int lives = 10;

    /**
     * @return gibt Anzahl der Leben des Droids zur√ºck
     */
    @JsonIgnore
    public int getDroidLives() {
        return lives;
    }
}
